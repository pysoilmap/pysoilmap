name: Tests
on:
  push:
  pull_request:

jobs:
  build:
    name: build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os:
          - ubuntu-latest
        python:
          - "3.7"
          - "3.8"
          - "3.9"
    defaults:
      run:
        shell: bash

    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python }}

      - run: pip install flake8
      - run: flake8

      - run: pip install build
      - run: python -m build

      - run: pip install twine
      - run: twine check dist/*

      - run: pip install pytest coverage
      - run: pip install $(ls dist/*.whl)[doc]
      - run: coverage run --source=pysoilmap -p -m pytest -v tests
      - run: coverage run --source=pysoilmap -p docs/examples/topography.py
        env:
          EE_KEY_DATA: ${{ secrets.EE_KEY_DATA }}
      - run: coverage combine

      - uses: actions/upload-artifact@v2
        with:
          name: dist
          path: dist
        if: startsWith(github.ref, 'refs/tags/v') &&
            matrix.os == 'ubuntu-latest' &&
            matrix.python == '3.8'

      - run: pip install coveralls
      - run: coveralls
        if: env.COVERALLS_REPO_TOKEN != ''
        env:
          COVERALLS_REPO_TOKEN: ${{ secrets.COVERALLS_REPO_TOKEN }}

  docs:
    name: Documentation
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: "3.9"
      - run: sudo apt-get install -y pandoc
      - run: pip install -e .[doc]
      - run: make -C docs html
        env:
          EE_KEY_DATA: ${{ secrets.EE_KEY_DATA }}

  deploy:
    name: Upload release
    runs-on: ubuntu-latest
    needs: build
    if: startsWith(github.ref, 'refs/tags/v')
        && github.event_name == 'push'
        && success()

    steps:
      - uses: actions/download-artifact@v2
        with:
          name: dist
          path: dist
      - uses: actions/setup-python@v2
        with:
          python-version: '3.8'
      - run: pip install twine

      - name: Upload PyPI package
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}
        run: twine upload dist/*
